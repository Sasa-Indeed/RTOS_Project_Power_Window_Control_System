/* Kernel includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"

/* MCAL includes. */
#include "gpio.h"
#include "window_control.h"


/* MCAL includes. */
#include "gpio.h"
#include "motors.h"
#include "window_control.h"


/* Flag queues */
volatile QueueHandle_t qLimitUpFlag, qLimitDownFlag, qJamFlag, qLockFlag, qDriverFlag, qDriverModeFlag, qPassengerModeFlag;

/* Semaphores */

/* Passenger semaphore */
xSemaphoreHandle sPassengerUp, sPassengerDown;

/* Driver semaphore */
xSemaphoreHandle sDriverUp, sDriverDown;

/* Jam task semaphore */
xSemaphoreHandle sJam;

/* Mutex*/
xSemaphoreHandle mutex;

/* The HW setup function */
static void prvSetupHardware( void );

/* Helper functions */
void Delay_MS(unsigned long long n);

/* FreeRTOS tasks */
void vPassengerWindowUpTask(void *pvParameters);
void vPassengerWindowDownTask(void *pvParameters);
void vDriverWindowUpTask(void *pvParameters);
void vDriverWindowDownTask(void *pvParameters);
void vJamClearingTask(void *pvParameters);
void vInitTask(void *pvParameters);


int main(void){
    /* Setup the hardware for use with the Tiva C board. */
    prvSetupHardware();

    /* Create Tasks here */
    xTaskCreate(vPassengerWindowUpTask, "Passenger_up_task", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
    xTaskCreate(vPassengerWindowDownTask, "Passenger_down_task", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
    xTaskCreate(vDriverWindowUpTask, "Driver_up_task", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
    xTaskCreate(vDriverWindowDownTask, "Driver_down_task", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
    xTaskCreate(vJamClearingTask, "Jam_clearing_task", configMINIMAL_STACK_SIZE, NULL, 4, NULL);
    xTaskCreate(vInitTask, "Init_task", configMINIMAL_STACK_SIZE, NULL, 4, NULL);


    /* Now all the tasks have been started - start the scheduler.

    NOTE : Tasks run in system mode and the scheduler runs in Supervisor mode.
    The processor MUST be in supervisor mode when vTaskStartScheduler is
    called.  The demo applications included in the FreeRTOS.org download switch
    to supervisor mode prior to main being called.  If you are not using one of
    these demo application projects then ensure Supervisor mode is used here. */
    vTaskStartScheduler();

    /* Should never reach here!  If you do then there was not enough heap
    available for the idle task to be created. */
    while(1);

}

void Delay_MS(unsigned long long n){
    uint32_t i, j;
    for (i = 0; i < n; i++){
        for(j = 0; j < 3180; j++);
    }
}


static void prvSetupHardware( void ){
    /* Place here any needed HW initialization such as GPIO, UART, etc.  */
    HAL_Limit_Switches_Init();
    HAL_Window_Switches_Init();
    HAL_Jam_Lock_Switches_Init();
    GPIO_BuiltinButtonsLedsInit();
    HAL_MotorsInit();
    GPIO_SW1EdgeTriggeredInterruptInit();
    GPIO_SW2EdgeTriggeredInterruptInit();

    /* Creating Queues */
    qLimitUpFlag       = xQueueCreate(1, sizeof(uint8_t));
    qLimitDownFlag     = xQueueCreate(1, sizeof(uint8_t));
    qJamFlag           = xQueueCreate(1, sizeof(uint8_t));
    qLockFlag          = xQueueCreate(1, sizeof(uint8_t));
    qDriverFlag        = xQueueCreate(1, sizeof(uint8_t));
    qDriverModeFlag    = xQueueCreate(1, sizeof(uint8_t));
    qPassengerModeFlag = xQueueCreate(1, sizeof(uint8_t));

    /* Creating Semaphores */
    vSemaphoreCreateBinary(sPassengerUp);
    vSemaphoreCreateBinary(sPassengerDown);
    vSemaphoreCreateBinary(sDriverUp);
    vSemaphoreCreateBinary(sDriverDown);
    vSemaphoreCreateBinary(sJam);
    mutex = xSemaphoreCreateMutex();

}

/**********************************************************************************
 *
 *                                  Tasks
 *
 **********************************************************************************/
void vInitTask(void *pvParameters){
    while(1){
        uint8_t initValue = 0;
        xQueueSendToBack(qLimitUpFlag, &initValue, 0);
        initValue = 0;
        xQueueSendToBack(qLimitDownFlag, &initValue, 0);
        initValue = 0;
        xQueueSendToBack(qJamFlag, &initValue, 0);
        initValue = 0;
        xQueueSendToBack(qLockFlag, &initValue, 0);
        initValue = 0;
        xQueueSendToBack(qDriverFlag, &initValue, 0);
        initValue = 0;
        xQueueSendToBack(qDriverModeFlag, &initValue, 0);

        vTaskSuspend(NULL);
    }
}

/* Passenger window up task */
void vPassengerWindowUpTask(void *pvParameters){
    xSemaphoreTake(sPassengerUp, 0);
    uint8_t upLimit, lockFlag, jamFlag, driverFlag, sendValue = 0;

    while(1){
        xSemaphoreTake(sPassengerUp, portMAX_DELAY);
        xSemaphoreTake(mutex, portMAX_DELAY);

        xQueuePeek(qJamFlag, &jamFlag, 0);
        xQueuePeek(qLockFlag, &lockFlag, 0);
        xQueuePeek(qLimitUpFlag, &upLimit, 0);
        xQueuePeek(qDriverFlag, &driverFlag, 0);



        if(upLimit || driverFlag || lockFlag){
            xSemaphoreGive(mutex);
        }else{

            //HAL_TurnOffMotorA();
            //HAL_TurnOnMotorACCLK_WISE(); // Window up
            GPIO_TurnOffAll();
            GPIO_RedLedOn();
            GPIO_BlueLedOn();

            sendValue = 0;
            xQueueOverwrite(qLimitDownFlag, &sendValue);

           Delay_MS(500);
            if(read_SWT(PASSENGER_WINDOW_PORT, PASSENGER_WINDOW_UP_SWITCH_PIN)){ //Manual  mode
                while(read_SWT(PASSENGER_WINDOW_PORT, PASSENGER_WINDOW_UP_SWITCH_PIN) && !upLimit && !lockFlag && !jamFlag && !driverFlag){
                    xQueuePeek(qJamFlag, &jamFlag, 0);
                    xQueuePeek(qLockFlag, &lockFlag, 0);
                    xQueuePeek(qLimitUpFlag, &upLimit, 0);
                    xQueuePeek(qDriverFlag, &driverFlag, 0);
                }
            }else{ //Automatic mode
                while(!upLimit && !lockFlag && !jamFlag && !driverFlag){
                    xQueuePeek(qJamFlag, &jamFlag, 0);
                    xQueuePeek(qLockFlag, &lockFlag, 0);
                    xQueuePeek(qLimitUpFlag, &upLimit, 0);
                    xQueuePeek(qDriverFlag, &driverFlag, 0);

                    //Checking if down button was pressed
                    sendValue = read_SWT(PASSENGER_WINDOW_PORT, PASSENGER_WINDOW_DOWN_SWITCH_PIN);
                    if(sendValue){
                        break;
                    }
                }
            }

            //HAL_TurnOffMotorA();
            GPIO_RedLedOff();
            GPIO_BlueLedOff();

            sendValue = 0;
            xQueueOverwrite(qJamFlag, &sendValue);

            xSemaphoreGive(mutex);
        }
    }
}

/* Passenger window down task */
void vPassengerWindowDownTask(void *pvParameters){
    xSemaphoreTake(sPassengerDown, 0);
    uint8_t downLimit, lockFlag, driverFlag, sendValue = 0;

    while(1){
        xSemaphoreTake(sPassengerDown, portMAX_DELAY);
        xSemaphoreTake(mutex, portMAX_DELAY);

        xQueuePeek(qLockFlag, &lockFlag, 0);
        xQueuePeek(qLimitDownFlag, &downLimit, 0);
        xQueuePeek(qDriverFlag, &driverFlag, 0);


        if(downLimit || driverFlag || lockFlag){
            xSemaphoreGive(mutex);
        }else{

            //HAL_TurnOffMotorA();
            //HAL_TurnOnMotorACLK_WISE(); // Window down
            GPIO_TurnOffAll();
            GPIO_GreenLedOn();
            GPIO_BlueLedOn();

            sendValue = 0;
            xQueueOverwrite(qLimitUpFlag, &sendValue);

           Delay_MS(500);

            if(read_SWT(PASSENGER_WINDOW_PORT, PASSENGER_WINDOW_DOWN_SWITCH_PIN)){ //Manual  mode
                while(read_SWT(PASSENGER_WINDOW_PORT, PASSENGER_WINDOW_DOWN_SWITCH_PIN) && !downLimit && !lockFlag && !driverFlag){
                    xQueuePeek(qLockFlag, &lockFlag, 0);
                    xQueuePeek(qLimitDownFlag, &downLimit, 0);
                    xQueuePeek(qDriverFlag, &driverFlag, 0);
                }

            }else{ //Automatic mode
                while(!downLimit && !lockFlag && !driverFlag){
                    xQueuePeek(qLockFlag, &lockFlag, 0);
                    xQueuePeek(qLimitDownFlag, &downLimit, 0);
                    xQueuePeek(qDriverFlag, &driverFlag, 0);

                    //Checking if down button was pressed
                    sendValue = read_SWT(PASSENGER_WINDOW_PORT, PASSENGER_WINDOW_UP_SWITCH_PIN);
                    if(sendValue){
                        break;
                    }
                }
            }

            //HAL_TurnOffMotorA();
            GPIO_GreenLedOff();
            GPIO_BlueLedOff();
            xSemaphoreGive(mutex);
        }
    }
}


void vDriverWindowUpTask(void *pvParameters){
    xSemaphoreTake(sDriverUp, 0);
    uint8_t upLimit, jamFlag,  sendValue = 0;

    while(1){
        xSemaphoreTake(sDriverUp, portMAX_DELAY);
        xSemaphoreTake(mutex, portMAX_DELAY);

        xQueuePeek(qJamFlag, &jamFlag, 0);
        xQueuePeek(qLimitUpFlag, &upLimit, 0);


        if(upLimit){
            sendValue = 0;
            xQueueOverwrite(qDriverFlag, &sendValue);
            xSemaphoreGive(mutex);
        }else{

            //HAL_TurnOffMotorA();
            //HAL_TurnOnMotorACCLK_WISE(); // Window up
            GPIO_TurnOffAll();
            GPIO_RedLedOn();

            sendValue = 0;
            xQueueOverwrite(qLimitDownFlag, &sendValue);

            Delay_MS(500);
            if(read_SWT(DRIVER_WINDOW_PORT, DRIVER_WINDOW_UP_SWITCH_PIN)){
                //Manual  mode
                while(read_SWT(DRIVER_WINDOW_PORT, DRIVER_WINDOW_UP_SWITCH_PIN) && !upLimit && !jamFlag){
                    xQueuePeek(qJamFlag, &jamFlag, 0);
                    xQueuePeek(qLimitUpFlag, &upLimit, 0);
                }

            }else{ //Automatic mode
                while(!upLimit && !jamFlag){
                    xQueuePeek(qJamFlag, &jamFlag, 0);
                    xQueuePeek(qLimitUpFlag, &upLimit, 0);

                    //Checking if down button was pressed
                    if(read_SWT(DRIVER_WINDOW_PORT, DRIVER_WINDOW_DOWN_SWITCH_PIN)){
                        break;
                    }
                }
            }

            GPIO_RedLedOff();
            //HAL_TurnOffMotorA();

            sendValue = 0;
            xQueueOverwrite(qJamFlag, &sendValue);
            xQueueOverwrite(qDriverFlag, &sendValue);

            xSemaphoreGive(mutex);
        }
    }
}

/* Driver Control of passenger Window down*/
void vDriverWindowDownTask(void *pvParameters){
    xSemaphoreTake(sDriverDown, 0);
    uint8_t downLimit, sendValue = 0;

    while(1){
        xSemaphoreTake(sDriverDown, portMAX_DELAY);
        xSemaphoreTake(mutex, portMAX_DELAY);

        xQueuePeek(qLimitDownFlag, &downLimit, 0);



        if(downLimit){
            sendValue = 0;
            xQueueOverwrite(qDriverFlag, &sendValue); //Give off driver Control
            xSemaphoreGive(mutex);
        }else{

            //HAL_TurnOffMotorA();
            //HAL_TurnOnMotorACLK_WISE(); // Window down
            GPIO_TurnOffAll();
            GPIO_GreenLedOn();

            sendValue = 0;
            xQueueOverwrite(qLimitUpFlag, &sendValue);

           Delay_MS(500);

            if(read_SWT(DRIVER_WINDOW_PORT, DRIVER_WINDOW_DOWN_SWITCH_PIN)){ //Manual  mode
                while(read_SWT(DRIVER_WINDOW_PORT, DRIVER_WINDOW_DOWN_SWITCH_PIN) && !downLimit){
                    xQueuePeek(qLimitDownFlag, &downLimit, 0);
                }

            }else{ //Automatic mode
                while(!downLimit){
                    xQueuePeek(qLimitDownFlag, &downLimit, 0);

                    //Checking if down button was pressed
                    if(read_SWT(DRIVER_WINDOW_PORT, DRIVER_WINDOW_UP_SWITCH_PIN)){
                        break;
                    }
                }
            }

            //HAL_TurnOffMotorA();
            GPIO_GreenLedOff();
            sendValue = 0;
            xQueueOverwrite(qDriverFlag, &sendValue);

            xSemaphoreGive(mutex);
        }
    }
}

void vJamClearingTask(void *pvParameters){
    xSemaphoreTake(sJam, 0);
    uint8_t jamValue = 0;
    while(1){
        xSemaphoreTake(sJam, portMAX_DELAY);
        xSemaphoreTake(mutex, portMAX_DELAY);
        //HAL_TurnOffMotorA();
        //HAL_TurnOnMotorACLK_WISE();
        GPIO_TurnOffAll();
        GPIO_GreenLedOn();
        Delay_MS(500);
        //HAL_TurnOffMotorA();
        GPIO_GreenLedOff();
        jamValue = 0;
        xQueueOverwrite(qJamFlag, &jamValue);
        xSemaphoreGive(mutex);
    }
}

/**********************************************************************************
 *
 *                                  ISRs
 *
 **********************************************************************************/

void GPIOA_Handler(void){
    uint8_t ONE = 1, ZERO = 0;
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;

    if(GPIO_PORTA_MIS_REG & 0x4){ //Limit Up
        xQueueOverwriteFromISR(qLimitDownFlag, &ZERO, &xHigherPriorityTaskWoken);
        xQueueOverwriteFromISR(qLimitUpFlag, &ONE, &xHigherPriorityTaskWoken);
        GPIO_PORTA_ICR_REG   |= (1<<2);
    }else if (GPIO_PORTA_MIS_REG & 0x8){//Limit Down
        xQueueOverwriteFromISR(qLimitDownFlag, &ONE, &xHigherPriorityTaskWoken);
        xQueueOverwriteFromISR(qLimitUpFlag, &ZERO, &xHigherPriorityTaskWoken);
        GPIO_PORTA_ICR_REG   |= (1<<3);
    }
}

void GPIOB_Handler(void){
    uint8 jamFlag, lockFlag;

    xQueuePeekFromISR(qLockFlag, &lockFlag);
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;


    if(GPIO_PORTB_MIS_REG & 0x1){ // Pin0 Jam Control
        jamFlag = 1;
        xQueueOverwriteFromISR(qJamFlag, &jamFlag, &xHigherPriorityTaskWoken);
        xSemaphoreGiveFromISR(sJam, &xHigherPriorityTaskWoken);
        portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
        GPIO_PORTB_ICR_REG   |= (1<<0);
    }else if (GPIO_PORTB_MIS_REG & 0x2){ // Pin1 Lock Control
        lockFlag ^= 0x1;
        xQueueOverwriteFromISR(qLockFlag, &lockFlag, &xHigherPriorityTaskWoken);
        GPIO_PORTB_ICR_REG   |= (1<<1);
    }

}

void GPIOC_Handler(void){
    uint8_t lockFlag, driverFlag, driverInterruptFlag;
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;

    xQueuePeekFromISR(qLockFlag, &lockFlag);
    xQueuePeekFromISR(qDriverFlag, &driverFlag);
    xQueuePeekFromISR(qDriverModeFlag, &driverInterruptFlag);

    if(GPIO_PORTC_MIS_REG & 0x10){ // Pin4 Driver Controls Passenger Window Up
        if(!driverInterruptFlag){
            driverFlag = 1;
            driverInterruptFlag++;

            xQueueOverwriteFromISR(qDriverFlag, &driverFlag, &xHigherPriorityTaskWoken);
            xQueueOverwriteFromISR(qDriverModeFlag, &driverInterruptFlag, &xHigherPriorityTaskWoken);
            xSemaphoreGiveFromISR(sDriverUp, &xHigherPriorityTaskWoken);
            portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);

        }
        GPIO_PORTC_ICR_REG   |= (1<<4);
    }else if (GPIO_PORTC_MIS_REG & 0x20){ // Pin5 Driver Controls Passenger Window Down
        if(!driverInterruptFlag){
            driverFlag = 1;
            xQueueOverwriteFromISR(qDriverFlag, &driverFlag, &xHigherPriorityTaskWoken);
            xSemaphoreGiveFromISR(sDriverDown, &xHigherPriorityTaskWoken);
            portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
        }
        GPIO_PORTC_ICR_REG   |= (1<<5);
    }else if (GPIO_PORTC_MIS_REG & 0x40){ // Pin6 Passenger Window Up
        if(!lockFlag && !driverFlag){
            xSemaphoreGiveFromISR(sPassengerUp, &xHigherPriorityTaskWoken);
            portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
        }
        GPIO_PORTC_ICR_REG   |= (1<<6);
    }else if (GPIO_PORTC_MIS_REG & 0x80){ // Pin7 Passenger Window Down
        if(!lockFlag && !driverFlag){
            xSemaphoreGiveFromISR(sPassengerDown, &xHigherPriorityTaskWoken);
            portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
        }
        GPIO_PORTC_ICR_REG   |= (1<<7);
    }

}

void GPIOF_Handler(void){
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
    uint8_t  driverInterruptFlag = 0;

    if(GPIO_PORTF_MIS_REG & 0x1){

    }else if(GPIO_PORTF_MIS_REG & 0x10){
        xQueueOverwriteFromISR(qDriverModeFlag, &driverInterruptFlag, &xHigherPriorityTaskWoken);
        GPIO_PORTF_ICR_REG   |= (1<<4);
    }

}

/*-----------------------------------------------------------*/
