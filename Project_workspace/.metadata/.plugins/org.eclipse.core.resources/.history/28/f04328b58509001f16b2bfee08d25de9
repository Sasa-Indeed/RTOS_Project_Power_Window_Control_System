#include "gpio.h"


void GPIO_BuiltinButtonsLedsInit(void){
    /*
     * PF0 --> SW2
     * PF1 --> Red LED
     * PF2 --> Blue LED
     * PF3 --> Green LED
     * PF4 --> SW1
     */

    /* Enable clock for PORTF and wait for clock to start */
    SYSCTL_RCGCGPIO_REG |= 0x20;
    while(!(SYSCTL_PRGPIO_REG & 0x20));

    GPIO_PORTF_LOCK_REG   = 0x4C4F434B;                       /* Unlock the GPIO_PORTF_CR_REG */
    GPIO_PORTF_CR_REG    |= (1<<0);                           /* Enable changes on PF0 */
    GPIO_PORTF_AMSEL_REG &= 0xE0;                             /* Disable Analog on PF0, PF1, PF2, PF3 and PF4 */
    GPIO_PORTF_PCTL_REG  &= 0xFFF00000;                       /* Clear PMCx bits for PF0, PF1, PF2, PF3 and PF4 to use it as GPIO pins */
    GPIO_PORTF_DIR_REG   &= ~(1<<0) & ~(1<<4);                /* Configure PF0 & PF4 as input pins */
    GPIO_PORTF_DIR_REG   |= ((1<<1) | (1<<2) | (1<<3));       /* Configure PF1, PF2 & PF3 as output pins */
    GPIO_PORTF_AFSEL_REG &= 0xE0;                             /* Disable alternative function on PF0, PF1, PF2, PF3 and PF4 */
    GPIO_PORTF_PUR_REG   |= ((1<<0)|(1<<4));                  /* Enable pull-up on PF0 & PF4 */
    GPIO_PORTF_DEN_REG   |= 0x1F;                             /* Enable Digital I/O on PF0, PF1, PF2, PF3 and PF4 */
    GPIO_PORTF_DATA_REG  &= ~(1<<1) & ~(1<<2) & ~(1<<3);      /* Clear bits 1, 2 & 3 in Data register to turn off the LEDs */
}

void MCAL_GPIO_Init(uint8 portNumber){

  //1. Initializing clock
    SYSCTL_RCGCGPIO_REG |= portNumber;

  //2. Busy wait until port is ready
    while(!(SYSCTL_PRGPIO_REG & portNumber));
}

void MCAL_GPIO_Pin_Init(vuint32_ptr PORTx, pin_config_t * config){

   //1. Unlocking port
  *((uint32_ptr)((uint8_ptr)PORTx + GPIOLOCK_BASE))  = 0x4C4F434B;

  //2. Commiting changes
  *((uint32_ptr)((uint8_ptr)PORTx + GPIOCR_BASE)) |= config->pinNumber;

  if(config->alterFunc == MCAL_GPIO_ALTERFUNC_NONE){
    //3. Configuring direction
    if(config->direction == MCAL_GPIO_DIRECTION_INPUT){
      *((uint32_ptr)((uint8_ptr)PORTx + GPIODIR_BASE)) &= ~config->pinNumber;   //Configuring pin as input
    }else {
      *((uint32_ptr)((uint8_ptr)PORTx + GPIODIR_BASE)) |= config->pinNumber;    //Configuring pin as output
    }

    //4. Configuring output options
    switch(config->outputMode){
    case MCAL_GPIO_OUTPUT_MODE_OPEN_DRAIN :
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOODR_BASE)) |= config->pinNumber;
      break;

    case MCAL_GPIO_OUTPUT_MODE_PULL_UP :
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPUR_BASE)) |= config->pinNumber;
      break;

    case MCAL_GPIO_OUTPUT_MODE_PULL_DOWN :
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPDR_BASE)) |= config->pinNumber;
      break;

    default:
      break;
    }

    //5. Configuring output speed
    switch(config->outputSpeed){
    case MCAL_GPIO_OUTPUT_SPEED_2mA_DRIVE :
      *((uint32_ptr)((uint8_ptr)PORTx + GPIODR2R_BASE)) |= config->pinNumber;
      break;

    case MCAL_GPIO_OUTPUT_SPEED_4mA_DRIVE :
      *((uint32_ptr)((uint8_ptr)PORTx + GPIODR4R_BASE)) |= config->pinNumber;
      break;

    case MCAL_GPIO_OUTPUT_SPEED_8mA_DRIVE :
      *((uint32_ptr)((uint8_ptr)PORTx + GPIODR8R_BASE)) |= config->pinNumber;
      break;

    default:
      break;
    }

  }else{
    //Enabling Alternative Function to the pin
    *((uint32_ptr)((uint8_ptr)PORTx + GPIOAFSEL_BASE)) |= config->pinNumber;

    if(config->alterFuncIO == MCAL_GPIO_ALTERFUNCIO_ENABLE){
      if(config->direction == MCAL_GPIO_DIRECTION_INPUT){
        *((uint32_ptr)((uint8_ptr)PORTx + GPIODIR_BASE)) &= ~config->pinNumber;   //Configuring pin as input
      }else {
        *((uint32_ptr)((uint8_ptr)PORTx + GPIODIR_BASE)) |= config->pinNumber;    //Configuring pin as output
      }
    }

    switch(config->pinNumber){
    case PIN_0 :
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) &= ~(0xF);
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) |= config->alterFunc;
      break;

    case PIN_1 :
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) &= ~(0xF << 4);
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) |= (config->alterFunc << 4);
      break;

    case PIN_2 :
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) &= ~(0xF << 8);
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) |= (config->alterFunc << 8);
      break;

    case PIN_3 :
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) &= ~(0xF << 12);
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) |= (config->alterFunc << 12);
      break;

    case PIN_4 :
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) &= ~(0xF << 16);
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) |= (config->alterFunc << 16);
      break;

    case PIN_5 :
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) &= ~(0xF << 20);
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) |= (config->alterFunc << 20);
      break;

    case PIN_6 :
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) &= ~(0xF << 24);
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) |= (config->alterFunc << 24);
      break;

    case PIN_7 :
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) &= ~(0xF<< 28);
      *((uint32_ptr)((uint8_ptr)PORTx + GPIOPCTL_BASE)) |= (config->alterFunc << 28);
      break;

    default:
      break;
    }
  }

  //6. Enabling pins
  *((uint32_ptr)((uint8_ptr)PORTx + GPIODEN_BASE)) |= config->pinNumber;
}

void MCAL_GPIO_WritePin(vuint32_ptr PORTx, uint8 PINx, uint8 value){
  if(value == HIGH){
    *((uint32_ptr)((uint8_ptr)PORTx + GPIODATA_BASE)) |= PINx; //Writing logical one
  }else{
    *((uint32_ptr)((uint8_ptr)PORTx + GPIODATA_BASE)) &= ~PINx; //Writing logical zero
  }
}



void MCAL_GPIO_WritePort(vuint32_ptr PORTx, uint8 value){
  *((uint32_ptr)((uint8_ptr)PORTx + GPIODATA_BASE)) = value; //Writing on the whole port
}




void MCAL_GPIO_TogglePin(vuint32_ptr PORTx, uint8 PINx){
   *((uint32_ptr)((uint8_ptr)PORTx + GPIODATA_BASE)) ^= PINx; //Toggling a pin
}



void MCAL_GPIO_ReadPin(vuint32_ptr PORTx, uint8 PINx, uint8 *value){
  *value = ((*((uint32_ptr)((uint8_ptr)PORTx + GPIODATA_BASE)) & PINx) != LOW) ? HIGH : LOW; //Reading a pin
}


void GPIO_RedLedOn(void)
{
    GPIO_PORTF_DATA_REG |= (1<<1);  /* Red LED ON */
}

void GPIO_BlueLedOn(void)
{
    GPIO_PORTF_DATA_REG |= (1<<2);  /* Blue LED ON */
}

void GPIO_GreenLedOn(void)
{
    GPIO_PORTF_DATA_REG |= (1<<3);  /* Green LED ON */
}

void GPIO_RedLedOff(void)
{
    GPIO_PORTF_DATA_REG &= ~(1<<1);  /* Red LED OFF */
}

void GPIO_BlueLedOff(void)
{
    GPIO_PORTF_DATA_REG &= ~(1<<2);  /* Blue LED OFF */
}

void GPIO_GreenLedOff(void)
{
    GPIO_PORTF_DATA_REG &= ~(1<<3);  /* Green LED OFF */
}

void GPIO_RedLedToggle(void)
{
    GPIO_PORTF_DATA_REG ^= (1<<1);  /* Red LED is toggled */
}

void GPIO_BlueLedToggle(void)
{
    GPIO_PORTF_DATA_REG ^= (1<<2);  /* Blue LED is toggled */
}

void GPIO_GreenLedToggle(void)
{
    GPIO_PORTF_DATA_REG ^= (1<<3);  /* Green LED is toggled */
}

uint8 GPIO_SW1GetState(void)
{
    return ((GPIO_PORTF_DATA_REG >> 4) & 0x01);
}

uint8 GPIO_SW2GetState(void)
{
    return ((GPIO_PORTF_DATA_REG >> 0) & 0x01);
}

void GPIO_SW1EdgeTriggeredInterruptInit(void)
{
    GPIO_PORTF_IS_REG    &= ~(1<<4);      /* PF4 detect edges */
    GPIO_PORTF_IBE_REG   &= ~(1<<4);      /* PF4 will detect a certain edge */
    GPIO_PORTF_IEV_REG   &= ~(1<<4);      /* PF4 will detect a falling edge */
    GPIO_PORTF_ICR_REG   |= (1<<4);       /* Clear Trigger flag for PF4 (Interrupt Flag) */
    GPIO_PORTF_IM_REG    |= (1<<4);       /* Enable Interrupt on PF4 pin */
    /* Set GPIO PORTF priority as 5 by set Bit number 21, 22 and 23 with value 2 */
    NVIC_PRI7_REG = (NVIC_PRI7_REG & GPIO_PORTF_PRIORITY_MASK) | (GPIO_PORTF_INTERRUPT_PRIORITY<<GPIO_PORTF_PRIORITY_BITS_POS);
    NVIC_EN0_REG         |= 0x40000000;   /* Enable NVIC Interrupt for GPIO PORTF by set bit number 30 in EN0 Register */
}

void GPIO_SW2EdgeTriggeredInterruptInit(void)
{
    GPIO_PORTF_IS_REG    &= ~(1<<0);      /* PF0 detect edges */
    GPIO_PORTF_IBE_REG   &= ~(1<<0);      /* PF0 will detect a certain edge */
    GPIO_PORTF_IEV_REG   &= ~(1<<0);      /* PF0 will detect a falling edge */
    GPIO_PORTF_ICR_REG   |= (1<<0);       /* Clear Trigger flag for PF0 (Interrupt Flag) */
    GPIO_PORTF_IM_REG    |= (1<<0);       /* Enable Interrupt on PF0 pin */
    /* Set GPIO PORTF priority as 5 by set Bit number 21, 22 and 23 with value 2 */
    NVIC_PRI7_REG = (NVIC_PRI7_REG & GPIO_PORTF_PRIORITY_MASK) | (GPIO_PORTF_INTERRUPT_PRIORITY<<GPIO_PORTF_PRIORITY_BITS_POS);
    NVIC_EN0_REG         |= 0x40000000;   /* Enable NVIC Interrupt for GPIO PORTF by set bit number 30 in EN0 Register */
}
