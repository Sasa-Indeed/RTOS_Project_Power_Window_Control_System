/*
 * window_switch.c
 *
 *  Created on: 3 May 2024
 *      Author: Ahmed
 */

#include <Window_Controls/window_control.h>

#define GPIO_PORTF_PRIORITY_MASK                    0xFF1FFFFF
#define GPIO_PORTF_PRIORITY_BITS_POS                21
#define GPIO_PORTF_INTERRUPT_PRIORITY               5

#define GPIO_PORTA_PRIORITY_MASK                    0xFFFFFF1F
#define GPIO_PORTA_PRIORITY_BITS_POS                5
#define GPIO_PORTA_INTERRUPT_PRIORITY               5

#define GPIO_PORTC_PRIORITY_MASK                    0xFF1FFFFF
#define GPIO_PORTC_PRIORITY_BITS_POS                21
#define GPIO_PORTC_INTERRUPT_PRIORITY               5

#define GPIO_PORTB_PRIORITY_MASK                    0xFFFF1FFF
#define GPIO_PORTB_PRIORITY_BITS_POS                13
#define GPIO_PORTB_INTERRUPT_PRIORITY               5


#define NULL 0

void HAL_windowInit(void){
    pin_config_t config;

    MCAL_GPIO_Init(DRIVER_WINDOW_PORT_NUMBER);
    MCAL_GPIO_Init(PASSENGER_WINDOW_PORT_NUMBER);
    MCAL_GPIO_Init(WINDOW_LOCK_SWITCH_PORT_NUMBER);

    /* For driver window up switch */
    config.pinNumber   = DRIVER_WINDOW_UP_SWITCH_PIN;
    config.direction   = MCAL_GPIO_DIRECTION_INPUT;
    config.outputMode  = MCAL_GPIO_OUTPUT_MODE_PULL_UP;
    config.outputSpeed = MCAL_GPIO_OUTPUT_SPEED_NONE;
    config.alterFunc   = MCAL_GPIO_ALTERFUNC_NONE;
    MCAL_GPIO_Pin_Init(DRIVER_WINDOW_PORT, &config);

    /* For driver window down switch */
    config.pinNumber = DRIVER_WINDOW_DOWN_SWITCH_PIN;
    MCAL_GPIO_Pin_Init(DRIVER_WINDOW_PORT, &config);

    /* For passenger window up switch */
    config.pinNumber   = PASSENGER_WINDOW_UP_SWITCH_PIN;
    config.direction   = MCAL_GPIO_DIRECTION_INPUT;
    config.outputMode  = MCAL_GPIO_OUTPUT_MODE_PULL_UP;
    config.outputSpeed = MCAL_GPIO_OUTPUT_SPEED_NONE;
    config.alterFunc   = MCAL_GPIO_ALTERFUNC_NONE;
    MCAL_GPIO_Pin_Init(PASSENGER_WINDOW_PORT, &config);

    /* For passenger window down switch */
    config.pinNumber = PASSENGER_WINDOW_DOWN_SWITCH_PIN;
    MCAL_GPIO_Pin_Init(PASSENGER_WINDOW_PORT, &config);

    /* For lock switch */
    config.pinNumber   = WINDOW_LOCK_SWITCH_PIN;
    MCAL_GPIO_Pin_Init(WINDOW_LOCK_SWITCH_PORT, &config);
}

uint8 GPIO_LockSWGetState(void){
    uint8 state = 0;
    MCAL_GPIO_ReadPin(WINDOW_LOCK_SWITCH_PORT, WINDOW_LOCK_SWITCH_PIN, &state);
    return state;
}

void read_swt(uint8 * swt, uint8 button_number){
  *swt = 0;
  uint8 state = 0;

  struct switches{
      vuint32_ptr PORTx;
      uint8 PINx;
  }switches1;


  switch(button_number){
  case DRIVER_WINDOW_UP_SWITCH :
      switches1.PORTx = DRIVER_WINDOW_PORT;
      switches1.PINx = DRIVER_WINDOW_UP_SWITCH_PIN;
      break;

  case DRIVER_WINDOW_DOWN_SWITCH :
      switches1.PORTx = DRIVER_WINDOW_PORT;
      switches1.PINx = DRIVER_WINDOW_DOWN_SWITCH_PIN;
      break;

  case PASSENGER_WINDOW_UP_SWITCH :
      switches1.PORTx = PASSENGER_WINDOW_PORT;
      switches1.PINx = PASSENGER_WINDOW_UP_SWITCH_PIN;
      break;

  default :
      switches1.PORTx = PASSENGER_WINDOW_PORT;
      switches1.PINx = PASSENGER_WINDOW_DOWN_SWITCH_PIN;
  }


  do{
    MCAL_GPIO_ReadPin(switches1.PORTx, switches1.PINx, &state);
    *swt |= !state;
  }while(!state);

}

uint8 read_LockSWT(void){
    uint8 state = 0;
    MCAL_GPIO_ReadPin(WINDOW_LOCK_SWITCH_PORT, WINDOW_LOCK_SWITCH_PIN, &state);
    return !state;
}

void HAL_Limit_Switches_Init(void){

    SYSCTL_RCGCGPIO_REG |= 0x1;                   /* Unlock GPIO PORTA CLK */
    while(!(SYSCTL_PRGPIO_REG & 0x1));            /* Wait for the peripheral to turn on */

    GPIO_PORTA_LOCK_REG   = 0x4C4F434B;           /* Unlock the GPIO_PORTA_CR_REG */
    GPIO_PORTA_DIR_REG   &= ~(1<<2) & ~(1<<3);    /* Configure PA2 & PA3 as input pins */
    GPIO_PORTA_PUR_REG   |= ((1<<2) | (1<<3));    /* Enable pull-up on PA2 & PA3 */
    GPIO_PORTA_DEN_REG   |= 0xC;                  /* Enable Digital I/O on PA2, PA3 */


    GPIO_PORTA_IS_REG    &= ~(1<<2) & ~(1<<3);    /* PA2 & PA3 detect edges */
    GPIO_PORTA_IBE_REG   &= ~(1<<2) & ~(1<<3);    /* PA2 & PA3 will detect a certain edge */
    GPIO_PORTA_IEV_REG   &= ~(1<<2) & ~(1<<3);    /* PA2 & PA3 will detect a falling edge */
    GPIO_PORTA_ICR_REG   |= (1<<2) | (1<<3);      /* Clear Trigger flag for PA2 & PA3 (Interrupt Flag) */
    GPIO_PORTA_IM_REG    |= (1<<2) | (1<<3);      /* Enable Interrupt on PA2 & PA3 pin */


    /* Set GPIO PORTA priority as 5 by set Bit number 5, 6 and 7 */
    NVIC_PRI0_REG = (NVIC_PRI0_REG & GPIO_PORTA_PRIORITY_MASK) | (GPIO_PORTA_INTERRUPT_PRIORITY << GPIO_PORTA_PRIORITY_BITS_POS);
    NVIC_EN0_REG         |= 0x00000001;   /* Enable NVIC Interrupt for GPIO PORTA by set bit number 0 in EN0 Register */
}

void HAL_Jam_Lock_Switches_Init(void){

    SYSCTL_RCGCGPIO_REG |= 0x2;                   /* Unlock GPIO PORTB CLK */
    while(!(SYSCTL_PRGPIO_REG & 0x2));            /* Wait for the peripheral to turn on */

    GPIO_PORTB_LOCK_REG   = 0x4C4F434B;           /* Unlock the GPIO_PORTB_CR_REG */
    GPIO_PORTB_DIR_REG   &= ~(1<<0) & ~(1<<1);    /* Configure PB0 & PB1 as input pins */
    GPIO_PORTB_PUR_REG   |= ((1<<0) | (1<<1));    /* Enable pull-up on PB0 & PB1 */
    GPIO_PORTB_DEN_REG   |= 0x3;                  /* Enable Digital I/O on PB0 & PB1 */


    GPIO_PORTB_IS_REG    &= ~(1<<0) & ~(1<<1);    /* PB0 & PB1 detect edges */
    GPIO_PORTB_IBE_REG   &= ~(1<<0) & ~(1<<1);    /* PB0 & PB1 will detect a certain edge */
    GPIO_PORTB_IEV_REG   &= ~(1<<0) & ~(1<<1);    /* PB0 & PB1 will detect a falling edge */
    GPIO_PORTB_ICR_REG   |= (1<<0) | (1<<1);      /* Clear Trigger flag for PB0 & PB1 (Interrupt Flag) */
    GPIO_PORTB_IM_REG    |= (1<<0) | (1<<1);      /* Enable Interrupt on PB0 & PB1 */


    /* Set GPIO PORTB priority as 5 by set Bit number 13, 14 and 15 */
    NVIC_PRI0_REG = (NVIC_PRI0_REG & GPIO_PORTB_PRIORITY_MASK) | (GPIO_PORTB_INTERRUPT_PRIORITY << GPIO_PORTB_PRIORITY_BITS_POS);
    NVIC_EN0_REG         |= 0x00000002;   /* Enable NVIC Interrupt for GPIO PORTB by set bit number 1 in EN0 Register */
}

void HAL_Window_Switches_Init(void){

    SYSCTL_RCGCGPIO_REG |= 0x4;                                       /* Unlock GPIO PORTC CLK */
    while(!(SYSCTL_PRGPIO_REG & 0x4));                                /* Wait for the peripheral to turn on */

    GPIO_PORTC_LOCK_REG   = 0x4C4F434B;                               /* Unlock the GPIO_PORTC_CR_REG */
    GPIO_PORTC_DIR_REG   &= ~(1<<4) & ~(1<<5) & ~(1<<6) & ~(1<<7);    /* Configure PC4, PC5, PC6,and PC7 as input pins */
    GPIO_PORTC_PUR_REG   |= ((1<<4) | (1<<5) | (1<<6) | (1<<7));      /* Enable pull-up on PC4, PC5, PC6,and PC7 */
    GPIO_PORTC_DEN_REG   |= 0xF0;                                     /* Enable Digital I/O on PC4, PC5, PC6,and PC7 */


    GPIO_PORTC_IS_REG    &= ~(1<<4) & ~(1<<5) & ~(1<<6) & ~(1<<7);    /* PC4, PC5, PC6,and PC7 detect edges */
    GPIO_PORTC_IBE_REG   &= ~(1<<4) & ~(1<<5) & ~(1<<6) & ~(1<<7);    /* PC4, PC5, PC6,and PC7 will detect a certain edge */
    GPIO_PORTC_IEV_REG   &= ~(1<<4) & ~(1<<5) & ~(1<<6) & ~(1<<7);    /* PC4, PC5, PC6,and PC7 will detect a falling edge */
    GPIO_PORTC_ICR_REG   |= ((1<<4) | (1<<5) | (1<<6) | (1<<7));      /* Clear Trigger flag for PC4, PC5, PC6,and PC7 (Interrupt Flag) */
    GPIO_PORTC_IM_REG    |= ((1<<4) | (1<<5) | (1<<6) | (1<<7));      /* Enable Interrupt on PC4, PC5, PC6,and PC7 pin */


    /* Set GPIO PORTC priority as 5 by set Bit number 21, 22 and 23 */
    NVIC_PRI0_REG = (NVIC_PRI0_REG & GPIO_PORTC_PRIORITY_MASK) | (GPIO_PORTC_INTERRUPT_PRIORITY << GPIO_PORTC_PRIORITY_BITS_POS);
    NVIC_EN0_REG         |= 0x00000004;   /* Enable NVIC Interrupt for GPIO PORTC by set bit number 2 in EN0 Register */
}


