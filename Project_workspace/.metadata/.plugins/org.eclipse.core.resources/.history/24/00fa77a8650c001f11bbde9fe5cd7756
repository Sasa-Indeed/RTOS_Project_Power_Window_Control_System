/*
 * window_switch.c
 *
 *  Created on: 3 May 2024
 *      Author: Ahmed
 */

#include <Window_Controls/window_control.h>

#define GPIO_PORTF_PRIORITY_MASK      0xFF1FFFFF
#define GPIO_PORTF_PRIORITY_BITS_POS  21
#define GPIO_PORTF_INTERRUPT_PRIORITY 5

#define GPIO_PORTA_PRIORITY_MASK      0xFFFFFF1F
#define GPIO_PORTA_PRIORITY_BITS_POS  5
#define GPIO_PORTA_INTERRUPT_PRIORITY 5

#define NULL 0

void HAL_windowInit(void){
    pin_config_t config;

    MCAL_GPIO_Init(DRIVER_WINDOW_PORT_NUMBER);
    MCAL_GPIO_Init(PASSENGER_WINDOW_PORT_NUMBER);
    MCAL_GPIO_Init(WINDOW_LOCK_SWITCH_PORT_NUMBER);

    /* For driver window up switch */
    config.pinNumber   = DRIVER_WINDOW_UP_SWITCH_PIN;
    config.direction   = MCAL_GPIO_DIRECTION_INPUT;
    config.outputMode  = MCAL_GPIO_OUTPUT_MODE_PULL_UP;
    config.outputSpeed = MCAL_GPIO_OUTPUT_SPEED_NONE;
    config.alterFunc   = MCAL_GPIO_ALTERFUNC_NONE;
    MCAL_GPIO_Pin_Init(DRIVER_WINDOW_PORT, &config);

    /* For driver window down switch */
    config.pinNumber = DRIVER_WINDOW_DOWN_SWITCH_PIN;
    MCAL_GPIO_Pin_Init(DRIVER_WINDOW_PORT, &config);

    /* For passenger window up switch */
    config.pinNumber   = PASSENGER_WINDOW_UP_SWITCH_PIN;
    config.direction   = MCAL_GPIO_DIRECTION_INPUT;
    config.outputMode  = MCAL_GPIO_OUTPUT_MODE_PULL_UP;
    config.outputSpeed = MCAL_GPIO_OUTPUT_SPEED_NONE;
    config.alterFunc   = MCAL_GPIO_ALTERFUNC_NONE;
    MCAL_GPIO_Pin_Init(PASSENGER_WINDOW_PORT, &config);

    /* For passenger window down switch */
    config.pinNumber = PASSENGER_WINDOW_DOWN_SWITCH_PIN;
    MCAL_GPIO_Pin_Init(PASSENGER_WINDOW_PORT, &config);

    /* For lock switch */
    config.pinNumber   = WINDOW_LOCK_SWITCH_PIN;
    MCAL_GPIO_Pin_Init(WINDOW_LOCK_SWITCH_PORT, &config);
}

uint8 GPIO_LockSWGetState(void){
    uint8 state = 0;
    MCAL_GPIO_ReadPin(WINDOW_LOCK_SWITCH_PORT, WINDOW_LOCK_SWITCH_PIN, &state);
    return state;
}

void read_swt(uint8 * swt, uint8 button_number){
  *swt = 0;
  uint8 state = 0;

  struct switches{
      vuint32_ptr PORTx;
      uint8 PINx;
  }switches1;


  switch(button_number){
  case DRIVER_WINDOW_UP_SWITCH :
      switches1.PORTx = DRIVER_WINDOW_PORT;
      switches1.PINx = DRIVER_WINDOW_UP_SWITCH_PIN;
      break;

  case DRIVER_WINDOW_DOWN_SWITCH :
      switches1.PORTx = DRIVER_WINDOW_PORT;
      switches1.PINx = DRIVER_WINDOW_DOWN_SWITCH_PIN;
      break;

  case PASSENGER_WINDOW_UP_SWITCH :
      switches1.PORTx = PASSENGER_WINDOW_PORT;
      switches1.PINx = PASSENGER_WINDOW_UP_SWITCH_PIN;
      break;

  default :
      switches1.PORTx = PASSENGER_WINDOW_PORT;
      switches1.PINx = PASSENGER_WINDOW_DOWN_SWITCH_PIN;
  }


  do{
    MCAL_GPIO_ReadPin(switches1.PORTx, switches1.PINx, &state);
    *swt |= !state;
  }while(!state);

}

uint8 read_LockSWT(void){
    uint8 state = 0;
    MCAL_GPIO_ReadPin(WINDOW_LOCK_SWITCH_PORT, WINDOW_LOCK_SWITCH_PIN, &state);
    return !state;
}

void HAL_Limit_Switches(void){

    SYSCTL_RCGCGPIO_REG |= 0x1;
    while(!(SYSCTL_PRGPIO_REG & 0x1));

    GPIO_PORTA_LOCK_REG   = 0x4C4F434B;                       /* Unlock the GPIO_PORTF_CR_REG */
    GPIO_PORTA_DIR_REG   &= ~(1<<2) & ~(1<<3);                /* Configure PA2 & PA3 as input pins */
    GPIO_PORTA_PUR_REG   |= ((1<<2)|(1<<3));                  /* Enable pull-up on PA2 & PA3 */
    GPIO_PORTA_DEN_REG   |= 0x6;                             /* Enable Digital I/O on PF0, PF1, PF2, PF3 and PF4 */



    GPIO_PORTA_IS_REG    &= ~(1<<2);      /* PA2 detect edges */
    GPIO_PORTA_IBE_REG   &= ~(1<<2);      /* PA2 will detect a certain edge */
    GPIO_PORTA_IEV_REG   &= ~(1<<2);      /* PA2 will detect a falling edge */
    GPIO_PORTA_ICR_REG   |= (1<<2);       /* Clear Trigger flag for PFA (Interrupt Flag) */
    GPIO_PORTA_IM_REG    |= (1<<2);       /* Enable Interrupt on PFA pin */
    /* Set GPIO PORTF priority as 5 by set Bit number 21, 22 and 23 with value 2 */
    NVIC_PRI0_REG = (NVIC_PRI0_REG & GPIO_PORTA_PRIORITY_MASK) | (GPIO_PORTA_INTERRUPT_PRIORITY<<GPIO_PORTA_PRIORITY_BITS_POS);
    NVIC_EN0_REG         |= 0x40000000;   /* Enable NVIC Interrupt for GPIO PORTF by set bit number 30 in EN0 Register */
}

